type: edu
files:
  - name: src/parking/Main.kt
    visible: true
    text: |
      package parking
      
      class Car(val id : String, val color : String){
      
          override fun toString() : String{
              return "Id: $id Color: $color"
          }
          override fun equals(other : Any?) : Boolean{
              if(other == null) return false
              return if(other is Car){
                  other.id == this.id
              } else false
          }
      }
      
      class Parking(numberOfPlaces : Int){
          private val carList : MutableList<Car?>
          private var occupied : Int = 0
          init{
              carList = MutableList<Car?>(numberOfPlaces) {null}
          }
          fun check(place : Int) : Boolean{
              return (carList[place-1] == null)
          }
          fun park(car : Car) : Int{
              val place = carList.indexOf(null)
              occupied++
              return if(place == -1) 0 else{
                  carList[place] = car
                  place+1
              }
          }
          fun display(){
              if(occupied == 0) println("Parking lot is empty.")
              else{
                  for(i in 0 until carList.size){
                      if(carList[i] is Car){
                          println("${i+1} ${carList[i]!!.id} ${carList[i]!!.color}")
                      }
                  }
              }
          }
      
          fun unPark(place : Int){
              occupied--
              carList[place-1] = null
          }
      }
      
      fun main() {
          var parking : Parking? = null
      
          while(true) {
              val commandList: List<String> = readln().split(" ")
              when(commandList.first()){
                  "create"->{
                      parking = Parking(commandList[1].toInt())
                      println("Created a parking lot with ${commandList[1]} spots.")
                  }
                  "leave"-> {
                      if(parking == null){
                          println("Sorry, a parking lot has not been created.")
                          continue
                      }
                      println(
                          if (!parking.check(commandList[1].toInt())) {
                              parking.unPark(commandList[1].toInt())
                              "Spot ${commandList[1]} is free."
                          } else {
                              "There is no car in spot ${commandList[1]}."
                          }
                      )
                  }
                  "park" ->{
                      if(parking == null){
                          println("Sorry, a parking lot has not been created.")
                          continue
                      }
                      val auxCar = Car(
                          commandList[1],
                          commandList[2].replaceFirstChar { if (it.isUpperCase()) it.titlecase() else it.toString() })
                      val spot = parking.park(auxCar)
                      println(if (spot == 0) "Sorry, the parking lot is full." else "${auxCar.color} car parked in spot $spot.")
                  }
                  "status"->{
                      if(parking == null){
                          println("Sorry, a parking lot has not been created.")
                          continue
                      }
                      parking.display()
                  }
                  "exit"->break
              }
          }
      }
    learner_created: false
  - name: test/ParkingTest.kt
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      import org.hyperskill.hstest.testcase.TestCase
      
      
      /** Default testCase. */
      fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
          setInput(input)
          setAttach(attach)
      }
      
      open class InputClue(
              val input: String,
              /** Do not show correct output and input. */
              val isPrivate: Boolean = false,
              /** Hint will be printed even for private tests. */
              val hint: String? = null
      ) {
      
          /** Ciphers [message] or adds a [hint] to the error if it is not null. */
          fun toFailure(message: String): CheckResult {
              if (isPrivate) {
                  // Ciphered
                  return CheckResult.wrong("Incorrect output." + (hint ?: ""))
              } else {
                  return CheckResult.wrong("$message ${hint ?: ""}")
              }
          }
      }
      
      
      class OutputClue(input: String, val output: String, isPrivate: Boolean, hint: String?)
          : InputClue(input, isPrivate, hint) {
      
          fun compareLines(reply: String): CheckResult {
              val hisLines = reply.trim().lines()
              val myLines = output.trim().lines()
      
              myLines.zip(hisLines).withIndex().forEach { (i, pair) ->
                  val (my, his) = pair
                  if (my.toLowerCase() != his.toLowerCase()) {
                      return toFailure("Error in line ${i + 1}: \"$his\" instead of \"$my\".")
                  }
              }
              // if all common lines are correct, but sizes are different.
              if (hisLines.size != myLines.size) {
                  return toFailure("Your output contains ${hisLines.size} " +
                          "lines instead of ${myLines.size}.")
              }
              return CheckResult.correct();
          }
      }
      
      fun outputCase(
              input: String,
              output: String,
              isPrivate: Boolean = false,
              hint: String? = null
      ) = testCase(OutputClue(input, output, isPrivate, hint), input)
      
      /** Trim Starts of all lines and trim empty lines. */
      fun String.trimAllIndents() = this.lines()
              .map { it.trimStart() }
              .dropWhile { it.isBlank() }
              .dropLastWhile { it.isBlank() }
              .joinToString("\n")
      
      
      class Task5Test : StageTest<OutputClue>() {
      
          override fun generate() = listOf(
                  outputCase(
                          """
                              spot_by_color yellow
                              create 4
                              park KA-01-HH-9999 White
                              park KA-01-HH-3672 White
                              park Rs-P-N-21 Red
                              park Rs-P-N-22 Red
                              reg_by_color GREEN
                              reg_by_color WHITE
                              spot_by_color GREEN
                              spot_by_color red
                              spot_by_reg ABC
                              spot_by_reg KA-01-HH-3672
                              spot_by_reg Rs-P-N-21
                              exit
                          """.trimAllIndents(),
                          """
                              Sorry, a parking lot has not been created.
                              Created a parking lot with 4 spots.
                              White car parked in spot 1.
                              White car parked in spot 2.
                              Red car parked in spot 3.
                              Red car parked in spot 4.
                              No cars with color GREEN were found.
                              KA-01-HH-9999, KA-01-HH-3672
                              No cars with color GREEN were found.
                              3, 4
                              No cars with registration number ABC were found.
                              2
                              3
                  """.trimAllIndents(),
                          hint = "See example 1."
                  ),
                  outputCase(
                          """
                              spot_by_color yellow
                              reg_by_color yellow
                              spot_by_reg yellow
                              exit
                          """.trimAllIndents(),
                          """
                              Sorry, a parking lot has not been created.
                              Sorry, a parking lot has not been created.
                              Sorry, a parking lot has not been created.
                  """.trimAllIndents(),
                          isPrivate = true,
                          hint = "Check commands until the parking is created."
                  ),
                  outputCase(
                          """
                              create 5
                              park A AA
                              park B BB
                              park C BB
                              park D AA
                              park E AA
                              leave 4
                              reg_by_color aa
                              reg_by_color bb
                              reg_by_color zz
                              spot_by_color aa
                              spot_by_color bb
                              spot_by_color zz
                              spot_by_reg A
                              spot_by_reg B
                              spot_by_reg Z
                              exit
                          """.trimAllIndents(),
                          """
                              Created a parking lot with 5 spots.
                              AA car parked in spot 1.
                              BB car parked in spot 2.
                              BB car parked in spot 3.
                              AA car parked in spot 4.
                              AA car parked in spot 5.
                              Spot 4 is free.
                              A, E
                              B, C
                              No cars with color zz were found.
                              1, 5
                              2, 3
                              No cars with color zz were found.
                              1
                              2
                              No cars with registration number Z were found.
                  """.trimAllIndents(),
                          isPrivate = true,
                          hint = "Check the case, when the parking is not full."
                  )
      
          )
      
          override fun check(reply: String, clue: OutputClue): CheckResult {
              return clue.compareLines(reply)
          }
      }
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/6601#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Fri, 02 Feb 2024 21:48:50 UTC"
record: 5
